import static config.Project.*
import static config.Dependencies.*

plugins {
	id 'org.springframework.boot'
	id 'io.spring.dependency-management'
	id 'io.freefair.lombok'
	id 'java'
	id 'jacoco'
}

group = groupName
version = projectVersion
sourceCompatibility = javaVersion

repositories {
	mavenCentral()
}

dependencies {
	implementation project(':book-service')
	implementation project(':user-service')

	implementation springBootStarter
	implementation springBootStarterWeb
	implementation springBootStarterActuator
	implementation springBootStarterDataJpa
	implementation springBootStarterSecurity
	implementation springBootStarterValidation
	implementation awsJavaSDKCore
	implementation micrometerCloudWatch
	implementation flywayCore
	implementation postgresql

	compile('org.springframework.boot:spring-boot-starter-mail')

	annotationProcessor springBootConfigurationProcessor

	testImplementation springBootStarterTest
	testImplementation testContainers
	testImplementation testContainersPostgres
	testImplementation testContainersJupiter
	testImplementation springSecurityTest
	testRuntimeOnly h2Database
}

// Setup Jacoco to generate the xml report
jacocoTestReport {
	reports {
		xml.enabled true
	}
}

// Setup Jacoco to fail the build if code coverage is under 80%
jacocoTestCoverageVerification {
	afterEvaluate {
		classDirectories.setFrom(
				fileTree(dir: "build/classes/java/main")
						.filter({file -> !file.path.contains('/config/')})
		)
	}
	violationRules {
		rule {
			limit {
				minimum = minimumCodeCoverage
			}
		}
	}
}
check.dependsOn jacocoTestCoverageVerification

test {
	useJUnitPlatform()
	beforeTest { descriptor ->
		logger.lifecycle("Running test: ${descriptor}")
	}
}


